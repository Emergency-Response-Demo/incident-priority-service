package com.redhat.emergency.response.incident.priority.rules

import com.redhat.emergency.response.incident.priority.rules.model.IncidentAssignmentEvent;
import com.redhat.emergency.response.incident.priority.rules.model.IncidentReportedEvent;
import com.redhat.emergency.response.incident.priority.rules.model.IncidentPriority;
import com.redhat.emergency.response.incident.priority.rules.model.AveragePriority;
import com.redhat.emergency.response.incident.priority.rules.model.PriorityZoneApplicationEvent;
import com.redhat.emergency.response.incident.priority.rules.model.PriorityZone;
import com.redhat.emergency.response.incident.priority.rules.model.ProximityEvaluator;
import com.redhat.emergency.response.incident.priority.rules.model.PriorityZoneClearEvent;
import java.util.List;

global org.slf4j.Logger logger;

rule "Create AveragePriority fact"
when
    not ( AveragePriority() )
then
    insert ( new AveragePriority() );
end

rule "Create ProximityEvaluator fact"
when
    not ( ProximityEvaluator() )
then
    insert ( new ProximityEvaluator() );
end

rule "Create incident priority fact when incident cannot be assigned"
when
    $e: IncidentAssignmentEvent( $i: incident, assigned == false )
    not ( IncidentPriority( incident == $i ) )
then
    logger.debug($i + " : " + drools.getRule().getName());
    insert( new IncidentPriority($i, $e.getLat(), $e.getLon()) );
end

rule "Update priority zone fact for an adjusted zone"
when
    $e: PriorityZoneApplicationEvent()
    $z: PriorityZone( id == $e.getPriorityZone().getId() )
then
    logger.debug($e.getPriorityZone().getId() + " : " + drools.getRule().getName());
    modify ( $z ) {
        setLat( $e.getPriorityZone().getLat() ),
        setLon( $e.getPriorityZone().getLon() ),
        setRadius( $e.getPriorityZone().getRadius() )
    }
end

rule "Create priority zone fact for a newly placed zone"
when
    $e: PriorityZoneApplicationEvent()
    not ( PriorityZone( id == $e.getPriorityZone().getId() ) )
then 
    logger.debug($e.getPriorityZone().getId() + " : " + drools.getRule().getName());
    insert( $e.getPriorityZone() );
end

rule "Escalate the priority of incidents which fall within an updated priority zone"
when
    $e: PriorityZoneApplicationEvent()
    $z: PriorityZone( id == $e.getPriorityZone().getId() )
    $x: ProximityEvaluator()
    $ps : List() from collect(IncidentPriority( escalated == false, $x.inPriorityZone(this, $z) ))
then
    for (Object $o : $ps) {
        logger.debug($z.getId() + " : " + ((IncidentPriority)$o) + " : " + drools.getRule().getName());
        IncidentPriority $p = (IncidentPriority) $o;
        modify ($p) {
            setEscalated( true ),
            setPriority( $p.getPriority() + 50 )
        }
    }
    
    retract( $e );
end

rule "Escalate the priority of an updated incident if it falls within at least one priority zone"
when 
    $e: IncidentAssignmentEvent( $i: incident, assigned == false )
    $p: IncidentPriority( incident == $i, escalated == false )
    $x: ProximityEvaluator()
    List( size > 0) 
        from collect (PriorityZone( $x.inPriorityZone($p, this) ))
then
    logger.debug($p.getIncident() + " : " + drools.getRule().getName());
    modify ( $p ) {
        setEscalated( true ),
        setPriority( $p.getPriority() + 50 )
    }
end

rule "Clear all priority zones"
when
    $c: PriorityZoneClearEvent()
    $zs: List() from collect(PriorityZone())
then
    logger.debug(drools.getRule().getName());

    for (Object $o : $zs) {
        PriorityZone $z = (PriorityZone) $o;
        retract ( $z );
    }
    retract ( $c );
end

rule "Increase priority by one when incident cannot be assigned"
when
    $e: IncidentAssignmentEvent( $i: incident, assigned == false )
    $p: IncidentPriority( incident == $i )
    $a: AveragePriority()
then
    logger.debug($i + " : " + drools.getRule().getName());
    modify ( $p ) {
        setPriority( $p.getPriority() + 1 )
    }
    modify ( $a ) {
        setNeedsEvaluation(true)
    }
    retract( $e );
    logger.debug($i + " : Priority = " + $p.getPriority());

end

rule "Retract incident priority when incident has been assigned"
when
    $e: IncidentAssignmentEvent( $i: incident, assigned == true )
    $p: IncidentPriority( incident == $i )
    $a: AveragePriority()
then
    logger.debug($i + " : " + drools.getRule().getName());
    retract ( $p );
    retract ( $e );
    modify ( $a ) {
        setNeedsEvaluation(true)
    }
end

rule "Average Priority"
when
    $a: AveragePriority( needsEvaluation == true )
    IncidentPriority()
    accumulate( IncidentPriority( $p: priority );  $avg: average( $p ) )
then
    modify ( $a ) {
        setNeedsEvaluation(false),
        setAveragePriority($avg)
    }
    logger.debug("Average Priority: " + $a.getAveragePriority());
end

rule "Average Priority when no IncidentPriority"
when
    $a: AveragePriority( needsEvaluation == true )
    not ( IncidentPriority() )
then
    modify ( $a ) {
        setNeedsEvaluation(false),
        setAveragePriority(0.0)
    }
    logger.debug("Average Priority: " + $a.getAveragePriority());
end

query "incidentPriority" (String i)
   incidentPriority : IncidentPriority( incident == i )
end

query "priorityZone" (String i)
   priorityZone: PriorityZone( id == i )
end

query "averagePriority"
   averagePriority : AveragePriority( )
end

query "incidents"
   incidentPriority: IncidentPriority()
end

query "priorityZones"
    priorityZone: PriorityZone()
end